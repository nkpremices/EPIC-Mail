{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "EPIC MAil",
    "description": "EPICMAIL API Documentation",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "contact": {
      "Author": "Pr√©mices NZANZU KAMASUWA"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sign up new user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Register new user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/signup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User created successfully"
          },
          "400": {
            "description": "Invalid entries"
          },
          "default": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/api/v1/auth/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login a user",
        "description": "",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Login a user",
            "required": true,
            "schema": {
              "$ref": "#/definitions/login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User logged in successfully"
          },
          "400": {
            "description": "Invalid Username or password"
          },
          "default": {
            "description": "Something went wrong"
          }
        }
      }
    },
    "/api/v1/messages": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get all received messages",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Received emails retreived successfully"
          },
          "400": {
            "description": "No email found"
          },
          "default": {
            "description": "Sorry, error occured"
          }
        }
      },
      "post": {
        "tags": [
          "Messages"
        ],
        "summary": "Send email",
        "description": "",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Send email",
            "required": true,
            "schema": {
              "$ref": "#/definitions/composeEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email sent successfully"
          },
          "400": {
            "description": "Invalid information supplied"
          },
          "default": {
            "description": "Sorry, error occured"
          }
        }
      }
    },
    "/api/v1/messages/unread": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get all unread emails",
        "description": "This endpoints fetch all unread emails.",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetch unread emails"
          },
          "400": {
            "description": "No email found"
          },
          "default": {
            "description": "Sorry, error occured"
          }
        }
      }
    },
    "/api/v1/messages/sent": {
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "Get all sent emails",
        "description": "This endpoints fetch all unread emails. It looks for every email that has not 'draft' as status",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Fetch sent emails"
          },
          "400": {
            "description": "No email found"
          },
          "default": {
            "description": "Sorry, error occured"
          }
        }
      }
    },
    "/api/v1/messages/{id}": {
      "delete": {
        "tags": [
          "Messages"
        ],
        "summary": "Delete a specific email",
        "description": "",
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/deteleEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Email has been deleted successfully"
          },
          "400": {
            "description": "The email you are trying to delete doesn't exist"
          },
          "default": {
            "description": "Sorry, error occured"
          }
        }
      },
      "get": {
        "tags": [
          "Messages"
        ],
        "summary": "fetch a specific email",
        "description": "",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/fecthEmail"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Message have been fecth successfully"
          },
          "400": {
            "description": "The email you are trying to view doesn't exist"
          },
          "default": {
            "description": "Error occured while processing your request"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "definitions": {
    "signup": {
      "type": "object",
      "properties": {
        "userName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "deteleEmail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "fecthEmail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        }
      }
    },
    "composeEmail": {
      "type": "object",
      "properties": {
        "sender": {
          "type": "string"
        },
        "reciever": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "parentMessageId": {
          "type": "integer",
          "default": 0
        },
        "status": {
          "type": "string",
          "default": "unread"
        }
      }
    }
  }
}